cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$val_training[ri, m_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(cur_pred) - length(replication)))
}
val_ens_predictions <- data.frame(method, replication, prediction)
length(val_ens_predictions)
rows(val_ens_predictions)
str(val_ens_predictions)
30*4*10000
str(networks_predictions)
max(val_ens_predictions$replication)
val_ens_predictions$replication[100000]
tail(val_ens_predictions)
head(val_ens_predictions)
repls
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$val_training[ri, m_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(cur_pred) - length(replication)))
}
val_ens_predictions <- data.frame(method, replication, prediction)
str(val_ens_predictions)
val_ens_cor_preds_histo <- ggplot(data=val_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.03) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on val")
val_ens_cor_preds_histo
val_ens_cor_preds_histo <- ggplot(data=val_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on val")
val_ens_cor_preds_histo
nets_cor_preds_histo <- ggplot(data=networks_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~network) + scale_y_log10()
nets_cor_preds_histo
val_ens_zero_counts <- ggplot(data=val_ens_predictions[val_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
val_ens_zero_counts
val_ens_nll <- ggplot(data=ens_results[ens_results$repli==repl, ]) + geom_boxplot(mapping=aes(x=method, y=nll)) + facet_wrap(~train_set)
val_ens_nll
val_ens_nll <- ggplot(data=ens_results) + geom_boxplot(mapping=aes(x=method, y=nll)) + facet_wrap(~train_set)
val_ens_nll
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$train_training[ri, m_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(cur_pred) - length(replication)))
}
train_ens_predictions <- data.frame(method, replication, prediction)
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.03) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
train_ens_zero_counts <- ggplot(data=train_ens_predictions[train_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
train_ens_zero_counts
?rbind
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(c(val_ens_predictions, train_ens_predictions))
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=~method, cols=~train_type) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(val_ens_predictions, train_ens_predictions)
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=~method, cols=~train_type) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type))
ens_cor_preds_histo
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method))
ens_cor_preds_histo
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10()
ens_cor_preds_histo
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10()
ens_cor_preds_histo
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10()
ens_cor_preds_histo
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class")
ens_cor_preds_histo
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
net_results <- read.csv(file.path(base_dir, "net_accuracies.csv"))
ens_results <- read.csv(file.path(base_dir, "ensemble_accuracies.csv"))
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls)
v <- c("a", "b", "c", "a")
v
unique(v)
v[-1]
v[1]
v[-2]
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c10"
repls <- 0:0
folds <- 0:49
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls, folds)
net_results <- read.csv(file.path(base_dir, "net_accuracies.csv"))
ens_results <- read.csv(file.path(base_dir, "ensemble_accuracies.csv"))
classes <- dim(nets_outputs[["test_outputs"]])[4]
nets_num <- length(nets_outputs[["networks"]])
preds <- nets_outputs[["test_outputs"]]
labs <- nets_outputs[["test_labels"]]
network <- c()
prediction <- c()
replication <- c()
for (ri in repls + 1)
{
for (net_i in seq_along(nets_outputs[["networks"]]))
{
net_outputs_prob <- softmax(preds[ri, net_i, , ])
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- net_outputs_prob[labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
network <- c(network, rep(nets_outputs[["networks"]][net_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(prediction) - length(replication)))
}
networks_predictions <- data.frame(network, replication, prediction)
nets_cor_preds_histo <- ggplot(data=networks_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~network) + scale_y_log10()
nets_cor_preds_histo
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$val_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
val_ens_predictions <- data.frame(method, replication, fold, prediction)
val_ens_cor_preds_histo <- ggplot(data=val_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on val")
val_ens_cor_preds_histo
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
val_ens_cor_preds_histo
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
val_ens_zero_counts <- ggplot(data=val_ens_predictions[val_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
val_ens_zero_counts
val_ens_nll <- ggplot(data=ens_results) + geom_boxplot(mapping=aes(x=method, y=nll)) + facet_wrap(~train_set)
val_ens_nll
train_ens_zero_counts <- ggplot(data=train_ens_predictions[train_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
train_ens_zero_counts
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(val_ens_predictions, train_ens_predictions)
str(val_ens_predictions)
str(train_ens_predictions)
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$train_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
train_ens_predictions <- data.frame(method, replication, fold, prediction)
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
train_ens_zero_counts <- ggplot(data=train_ens_predictions[train_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
train_ens_zero_counts
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(val_ens_predictions, train_ens_predictions)
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class")
ens_cor_preds_histo
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c100"
repls <- 0:9
folds <- 0:4
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls, folds)
net_results <- read.csv(file.path(base_dir, "net_accuracies.csv"))
ens_results <- read.csv(file.path(base_dir, "ensemble_accuracies.csv"))
classes <- dim(nets_outputs[["test_outputs"]])[4]
nets_num <- length(nets_outputs[["networks"]])
preds <- nets_outputs[["test_outputs"]]
labs <- nets_outputs[["test_labels"]]
network <- c()
prediction <- c()
replication <- c()
for (ri in repls + 1)
{
for (net_i in seq_along(nets_outputs[["networks"]]))
{
net_outputs_prob <- softmax(preds[ri, net_i, , ])
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- net_outputs_prob[labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
network <- c(network, rep(nets_outputs[["networks"]][net_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(prediction) - length(replication)))
}
networks_predictions <- data.frame(network, replication, prediction)
nets_cor_preds_histo <- ggplot(data=networks_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~network) + scale_y_log10()
nets_cor_preds_histo
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$val_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
val_ens_predictions <- data.frame(method, replication, fold, prediction)
val_ens_cor_preds_histo <- ggplot(data=val_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on val")
val_ens_cor_preds_histo
val_ens_zero_counts <- ggplot(data=val_ens_predictions[val_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
val_ens_zero_counts
val_ens_nll <- ggplot(data=ens_results) + geom_boxplot(mapping=aes(x=method, y=nll)) + facet_wrap(~train_set)
val_ens_nll
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$train_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
train_ens_predictions <- data.frame(method, replication, fold, prediction)
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
train_ens_zero_counts <- ggplot(data=train_ens_predictions[train_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
train_ens_zero_counts
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(val_ens_predictions, train_ens_predictions)
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class")
ens_cor_preds_histo
library(ggplot2)
library(dplyr)
library(tidyr)
library("ggpubr")
library(LDATS)
library(stringr)
source("utils.R")
base_dir <- "../data/data_train_val_half_c100"
repls <- 0:9
folds <- 0:4
nets_outputs <- load_network_outputs(base_dir, repls)
ens_outputs <- load_ensemble_outputs(base_dir, repls, folds)
net_results <- read.csv(file.path(base_dir, "net_accuracies.csv"))
ens_results <- read.csv(file.path(base_dir, "ensemble_accuracies.csv"))
classes <- dim(nets_outputs[["test_outputs"]])[4]
nets_num <- length(nets_outputs[["networks"]])
preds <- nets_outputs[["test_outputs"]]
labs <- nets_outputs[["test_labels"]]
network <- c()
prediction <- c()
replication <- c()
for (ri in repls + 1)
{
for (net_i in seq_along(nets_outputs[["networks"]]))
{
net_outputs_prob <- softmax(preds[ri, net_i, , ])
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- net_outputs_prob[labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
network <- c(network, rep(nets_outputs[["networks"]][net_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
}
replication <- c(replication, rep(ri, length(prediction) - length(replication)))
}
networks_predictions <- data.frame(network, replication, prediction)
nets_cor_preds_histo <- ggplot(data=networks_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~network) + scale_y_log10()
nets_cor_preds_histo
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$val_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
val_ens_predictions <- data.frame(method, replication, fold, prediction)
val_ens_cor_preds_histo <- ggplot(data=val_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on val")
val_ens_cor_preds_histo
val_ens_zero_counts <- ggplot(data=val_ens_predictions[val_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
val_ens_zero_counts
val_ens_nll <- ggplot(data=ens_results) + geom_boxplot(mapping=aes(x=method, y=nll)) + facet_wrap(~train_set)
val_ens_nll
classes <- dim(nets_outputs[["test_outputs"]])[4]
labs <- nets_outputs[["test_labels"]]
method <- c()
prediction <- c()
replication <- c()
fold <- c()
for (ri in repls + 1)
{
for (m_i in seq_along(ens_outputs$methods))
{
for (f_i in folds + 1)
{
cur_pred <- c()
for (class in 1:classes)
{
class_probs <- ens_outputs$train_training[ri, m_i, f_i, labs[ri, ] == (class - 1), class]
cur_pred <- c(cur_pred, class_probs)
}
method <- c(method, rep(ens_outputs$methods[m_i], length(cur_pred)))
prediction <- c(prediction, cur_pred)
fold <- c(fold, rep(f_i - 1, length(cur_pred)))
}
}
replication <- c(replication, rep(ri - 1, length(cur_pred) - length(replication)))
}
train_ens_predictions <- data.frame(method, replication, fold, prediction)
train_ens_cor_preds_histo <- ggplot(data=train_ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_wrap(~method) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class - ens trained on train")
train_ens_cor_preds_histo
train_ens_zero_counts <- ggplot(data=train_ens_predictions[train_ens_predictions$prediction == 0, ]) + geom_histogram(mapping=aes(x=method), stat="count")
train_ens_zero_counts
val_ens_predictions$train_type <- "vt"
train_ens_predictions$train_type <- "tt"
ens_predictions <- rbind(val_ens_predictions, train_ens_predictions)
ens_cor_preds_histo <- ggplot(data=ens_predictions) + geom_histogram(mapping=aes(x=prediction), binwidth=0.01) + facet_grid(rows=vars(method), cols=vars(train_type)) + scale_y_log10() + ggtitle("Probabilities predicted for the correct class")
ens_cor_preds_histo
